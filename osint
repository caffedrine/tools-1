                             _,add8ba,
                            ,d888888888b,
                           d8888888888888b                        _,ad8ba,_
                          d888888888888888)                     ,d888888888b,
                          I8888888888888888 _________          ,8888888888888b
                __________`Y88888888888888P"""""""""""baaa,__ ,888888888888888,
            ,adP"""""""""""9888888888P""^                 ^""Y8888888888888888I
         ,a8"^           ,d888P"888P^                           ^"Y8888888888P'
       ,a8^            ,d8888'                                     ^Y8888888P'
      a88'           ,d8888P'                                        I88P"^
    ,d88'           d88888P'                                          "b,
   ,d88'           d888888'                                            `b,
  ,d88'           d888888I                                              `b,
  d88I           ,8888888'            ___                                `b,
 ,888'           d8888888          ,d88888b,              ____            `b,
 d888           ,8888888I         d88888888b,           ,d8888b,           `b
,8888           I8888888I        d8888888888I          ,88888888b           8,
I8888           88888888b       d88888888888'          8888888888b          8I
d8886           888888888       Y888888888P'           Y8888888888,        ,8b
88888b          I88888888b      `Y8888888^             `Y888888888I        d88,
Y88888b         `888888888b,      `""""^                `Y8888888P'       d888I
`888888b         88888888888b,                           `Y8888P^        d88888
 Y888888b       ,8888888888888ba,_          _______        `""^        ,d888888
 I8888888b,    ,888888888888888888ba,_     d88888888b               ,ad8888888I
 `888888888b,  I8888888888888888888888b,    ^"Y888P"^      ____.,ad88888888888I
  88888888888b,`888888888888888888888888b,     ""      ad888888888888888888888'
  8888888888888698888888888888888888888888b_,ad88ba,_,d88888888888888888888888
  88888888888888888888888888888888888888888b,`"""^ d8888888888888888888888888I
  8888888888888888888888888888888888888888888baaad888888888888888888888888888'
  Y8888888888888888888888888888888888888888888888888888888888888888888888888P
  I888888888888888888888888888888888888888888888P^  ^Y8888888888888888888888'
  `Y88888888888888888P88888888888888888888888888'     ^88888888888888888888I
   `Y8888888888888888 `8888888888888888888888888       8888888888888888888P'
    `Y888888888888888  `888888888888888888888888,     ,888888888888888888P'
     `Y88888888888888b  `88888888888888888888888I     I888888888888888888'
       "Y8888888888888b  `8888888888888888888888I     I88888888888888888'
         "Y88888888888P   `888888888888888888888b     d8888888888888888'
            ^""""""""^     `Y88888888888888888888,    888888888888888P'
                  Normand    "8888888888888888888b,   Y888888888888P^
                  Veilleux    `Y888888888888888888b   `Y8888888P"^
                                "Y8888888888888888P     `""""^
                                  `"YY88888888888P'
                                       ^""""""""'


指南 - 第1部分（OSINT  - 被動偵察和資產發現）
為了開始這個關於攻擊性安全技術的系列，我將從我認為是pentesting最重要的方面開始。被動偵察和OSINT。現在，不要讓“被動”這個詞欺騙你。這不是輕微的偵察;你可以通過被動偵察發現大量信息，而不會做任何侵入。

定義被動

我對“被動”一詞的定義可能與其他人所定義為被動的不同。在我的書中，任何可以偽裝成常規流量，沒有侵入性或易於檢測的東西。基本上，如果你無法區分攻擊者和訪問者，並且你沒有做任何侵入性/潛在破壞性的事情，那就是被動的。我知道我會得到一些會爭辯死亡的人，這不是100％被動的，你是對的，但這仍然是我最初的工作流程。

我從哪裡開始？

好問題。這將在很大程度上取決於你正在做什麼樣的pentest。有各種不同類型的測試：Black Box Pentest，White Box Pentest和介於兩者之間的任何東西。

Black Box Pentest就是當你模擬攻擊者時，你會獲得一個啟動主機，通常是一個範圍內的IP地址列表，就是這樣。您必須嘗試發現服務，網絡設計以及這種性質的事物。

白盒Pentest是類似的，除了你得到內部員工（和更多）將擁有的一切，這包括應用程序源代碼，網絡設計配置，圖表，這樣的東西。

兩種類型的pentest都有自己的位置。通常情況下，Black Box pentest比White Box pentest更有說服力，因為它顯示了外部攻擊者可以用很少的起始信息發現什麼。在本系列中，我們將介紹前者Black Box pentesting，因為它是最常見的pentest，並且將成為大多數組織所尋求的。

現在，您很快就會注意到我提到您可能會獲得範圍內的IP地址列表。簡單地掃描所有這些IP並完成它是非常不現實的，因此您應該首先從資產發現階段開始。現在有很多方法可以做到這一點，我將以穀歌為例，我們將以公司網站為出發點。 https://www.google.com/

Burp Suite Passive，與Sherlock Holmes一樣敏銳

我們能做些什麼呢？我喜歡做的第一件事是訪問網站，我的瀏覽器配置為使用Burpsuite作為代理，並安裝了根SSL證書。


如果您查看BurpSuite的側欄，請在目標>站點地圖> https://www.google.com/下。我們已經可以快速瀏覽網站的即時文件結構，加載的腳本，如果我們查看更廣泛的站點地圖，一長串其他請求的主機，我們可能會決定稍後使用此信息。與往常一樣，最好收集太多信息並決定不使用它而不是刪除它，最後需要它。請記住，這是'被動'偵察，我們需要在這個階段保持非常安靜，而不是掀起任何警鐘。請注意，如果此特定網站未收到許多網頁瀏覽量，您可能決定使用與該網站的目標受眾群體相同的區域使用VPN。如果SOC / SIEM解決方案是敏感的，即使來自外部位置的頁面視圖也可以創建標記。如果你的目標是不被任何監控解決方案檢測到（通常是一個良好的測試目標），那麼這可能是你想要的。

如果您有Burp Suite Professional，您可以右鍵單擊此資產並選擇“被動掃描此主機”，它將搜索您現有的請求頁面代碼，以查找已知漏洞，電子郵件洩露等。

好的，這對我們沒有太大幫助。偶爾會出現像/ cgi-bin /，/ admin /或/ includes /這樣的東西，如果有什麼東西引起你的注意，立即在你的報告軟件中寫下來（可能在像Lair 7這樣的工具中）。

使用Shodan進行被動端口掃描......等待，被動端口掃描？什麼？

你去過網站，你知道至少80端口或443端口是打開的，但還有什麼運行？你可以打開Shodan，或者你可以使用非常酷的nmap腳本。

獲取Shodan API密鑰，並將其與此nmap命令放在一起：

nmap -script = shodan-api -script-args'shodan-api.apikey = XXXXXX'google.com


在這張圖片中，我已經審查了我的API密鑰，雖然這是一個非常簡單的例子，但這會做很多事情：

-sn  - 禁用端口掃描

-Pn  - 跳過主機發現，不要ping主機，

-n  - 跳過DNS解析

然後Nmap會意識到它沒有什麼可做的，並將運行shodan-api腳本。 Shodan API腳本將發送到shodan.io並檢索它所知道的有關主機的所有信息，包括有時主機版本和端口號。這在其他情況下已經提供了更多信息，您的里程可能會有所不同。

這些要點
